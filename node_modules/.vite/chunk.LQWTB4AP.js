import {
  NULL_DYNAMIC_COMPONENT,
  camelize,
  capitalize,
  currentInstance,
  currentRenderingInstance,
  getComponentName,
  isString,
  warn
} from "./chunk.IFUYV77P.js";

// node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js
var COMPONENTS = "components";
function resolveDynamicComponent(component) {
  if (isString(component)) {
    return resolveAsset(COMPONENTS, component, false) || component;
  } else {
    return component || NULL_DYNAMIC_COMPONENT;
  }
}
function resolveAsset(type, name, warnMissing = true) {
  const instance = currentRenderingInstance || currentInstance;
  if (instance) {
    const Component = instance.type;
    if (type === COMPONENTS) {
      if (name === `_self`) {
        return Component;
      }
      const selfName = getComponentName(Component);
      if (selfName && (selfName === name || selfName === camelize(name) || selfName === capitalize(camelize(name)))) {
        return Component;
      }
    }
    const res = resolve(instance[type] || Component[type], name) || resolve(instance.appContext[type], name);
    if (warnMissing && !res) {
      warn(`Failed to resolve ${type.slice(0, -1)}: ${name}`);
    }
    return res;
  } else if (true) {
    warn(`resolve${capitalize(type.slice(0, -1))} can only be used in render() or setup().`);
  }
}
function resolve(registry, name) {
  return registry && (registry[name] || registry[camelize(name)] || registry[capitalize(camelize(name))]);
}

export {
  COMPONENTS,
  resolveDynamicComponent,
  resolveAsset
};
//# sourceMappingURL=chunk.5CI3MXAY.js.map
